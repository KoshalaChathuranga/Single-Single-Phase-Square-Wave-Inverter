
GccApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072e  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000690  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000025c  00000000  00000000  00001036  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b0  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000df  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000178b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

volatile uint8_t Duty_Cycle = 0;

int main(void)
{
	DDRD |= (1 << PORTD6);
  90:	56 9a       	sbi	0x0a, 6	; 10
	TCCR0A = (1 << COM0A1) | (1 << WGM00) | (1 << WGM01);
  92:	83 e8       	ldi	r24, 0x83	; 131
  94:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS00);
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);
  9a:	ee e6       	ldi	r30, 0x6E	; 110
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	80 83       	st	Z, r24
	sei();
  a4:	78 94       	sei
	{
		_delay_ms(100);
		Duty_Cycle += 50;
		if (Duty_Cycle > 50)
		{
			Duty_Cycle = 50;
  a6:	92 e3       	ldi	r25, 0x32	; 50
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	e7 ea       	ldi	r30, 0xA7	; 167
  aa:	f1 e6       	ldi	r31, 0x61	; 97
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x1c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x22>
  b2:	00 00       	nop
	sei();
	
	while (1)
	{
		_delay_ms(100);
		Duty_Cycle += 50;
  b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b8:	8e 5c       	subi	r24, 0xCE	; 206
  ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if (Duty_Cycle > 50)
  be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c2:	83 33       	cpi	r24, 0x33	; 51
  c4:	88 f3       	brcs	.-30     	; 0xa8 <main+0x18>
		{
			Duty_Cycle = 50;
  c6:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
  ca:	ee cf       	rjmp	.-36     	; 0xa8 <main+0x18>

000000cc <__vector_16>:
		}
	}
}

ISR(TIMER0_OVF_vect)
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	2f 93       	push	r18
  d8:	5f 93       	push	r21
  da:	6f 93       	push	r22
  dc:	7f 93       	push	r23
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
	OCR0A = (Duty_Cycle * 255) / 100;
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	82 9f       	mul	r24, r18
  ee:	c0 01       	movw	r24, r0
  f0:	11 24       	eor	r1, r1
  f2:	64 e6       	ldi	r22, 0x64	; 100
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	0e 94 8b 00 	call	0x116	; 0x116 <__divmodhi4>
  fa:	67 bd       	out	0x27, r22	; 39
}
  fc:	bf 91       	pop	r27
  fe:	af 91       	pop	r26
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	7f 91       	pop	r23
 106:	6f 91       	pop	r22
 108:	5f 91       	pop	r21
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__divmodhi4>:
 116:	97 fb       	bst	r25, 7
 118:	07 2e       	mov	r0, r23
 11a:	16 f4       	brtc	.+4      	; 0x120 <__divmodhi4+0xa>
 11c:	00 94       	com	r0
 11e:	07 d0       	rcall	.+14     	; 0x12e <__divmodhi4_neg1>
 120:	77 fd       	sbrc	r23, 7
 122:	09 d0       	rcall	.+18     	; 0x136 <__divmodhi4_neg2>
 124:	0e 94 9f 00 	call	0x13e	; 0x13e <__udivmodhi4>
 128:	07 fc       	sbrc	r0, 7
 12a:	05 d0       	rcall	.+10     	; 0x136 <__divmodhi4_neg2>
 12c:	3e f4       	brtc	.+14     	; 0x13c <__divmodhi4_exit>

0000012e <__divmodhi4_neg1>:
 12e:	90 95       	com	r25
 130:	81 95       	neg	r24
 132:	9f 4f       	sbci	r25, 0xFF	; 255
 134:	08 95       	ret

00000136 <__divmodhi4_neg2>:
 136:	70 95       	com	r23
 138:	61 95       	neg	r22
 13a:	7f 4f       	sbci	r23, 0xFF	; 255

0000013c <__divmodhi4_exit>:
 13c:	08 95       	ret

0000013e <__udivmodhi4>:
 13e:	aa 1b       	sub	r26, r26
 140:	bb 1b       	sub	r27, r27
 142:	51 e1       	ldi	r21, 0x11	; 17
 144:	07 c0       	rjmp	.+14     	; 0x154 <__udivmodhi4_ep>

00000146 <__udivmodhi4_loop>:
 146:	aa 1f       	adc	r26, r26
 148:	bb 1f       	adc	r27, r27
 14a:	a6 17       	cp	r26, r22
 14c:	b7 07       	cpc	r27, r23
 14e:	10 f0       	brcs	.+4      	; 0x154 <__udivmodhi4_ep>
 150:	a6 1b       	sub	r26, r22
 152:	b7 0b       	sbc	r27, r23

00000154 <__udivmodhi4_ep>:
 154:	88 1f       	adc	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	5a 95       	dec	r21
 15a:	a9 f7       	brne	.-22     	; 0x146 <__udivmodhi4_loop>
 15c:	80 95       	com	r24
 15e:	90 95       	com	r25
 160:	bc 01       	movw	r22, r24
 162:	cd 01       	movw	r24, r26
 164:	08 95       	ret

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
